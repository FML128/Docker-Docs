worker_processes 1;

worker_rlimit_nofile 1047552;

worker_shutdown_timeout 18000;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        logs/nginx.pid;

events {
    multi_accept        on;                                                                                            
    worker_connections  16384;                                                                      
    use                 epoll;
}

# Get log_level from environment
# And then use value with lua os.getenv in non-mounted configs.
env LOG_LEVEL;

http {
    init_by_lua_block {
	    ok, res = pcall(require, "configuration")
                if not ok then
                error("require failed: " .. tostring(res))
                else
                configuration = res
	    end
            ok, res = pcall(require, "docs_balancer")
                if not ok then                                                                                            
                error("require failed: " .. tostring(res))
                else                                                                                                      
                docs_balancer = res
                end
    }
    lua_package_path "/etc/nginx/lua/?.lua;;";
    # dict where backends will be stored
    lua_shared_dict endpoints_data 20M;
    # dict where reserved backends will be stored
    lua_shared_dict reserved_data 20M;
    # dict where live backends index is stored
    lua_shared_dict rr_live_index 10M;
    # dict where reserved index is stored
    lua_shared_dict rr_reserved_index 10M;

    include       mime.types;
    default_type  application/octet-stream;

    log_format upstreaminfo '$remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent 
                            "$http_referer" "$http_user_agent" $request_length $request_time 
                             $upstream_addr $upstream_response_length $upstream_response_time $upstream_status $req_id';

    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    tcp_nopush     on;

    keepalive_timeout  65;

    map $http_upgrade $connection_upgrade {
                default          upgrade;
    }

    map $http_x_request_id $req_id {                                                                                                                                         
                default   $http_x_request_id;
	       	""        $request_id; 
    }

    map $http_x_forwarded_proto $the_scheme {
        default $http_x_forwarded_proto;
        "" $scheme;
    }

    upstream main_balancer {

                server 0.0.0.1; # placeholder

                balancer_by_lua_block {
                        docs_balancer.balance_ep()
                }

                keepalive 320;
                keepalive_time 1h;
                keepalive_timeout  60s;
                keepalive_requests 10000;

    }

    resolver local=on;

    log_subrequest      on;

    access_log /usr/local/openresty/nginx/logs/access.log upstreaminfo;                                                                                                                                                                                
    error_log  /usr/local/openresty/nginx/logs/error.log notice;

    proxy_cache_path /var/tmp/docs_cache  levels=1:2 keys_zone=docs_cache:75m max_size=4g inactive=1d   use_temp_path=off;

    include /etc/nginx/conf.d/*.conf;
}

