services:
  proxy:
    container_name: proxy
    build:
      context: .
      dockerfile: ${DOCKERFILE}
      target: proxy
    image: ${ACCOUNT_NAME}/${PREFIX_NAME}-proxy${PRODUCT_EDITION}:${DOCKER_TAG}
    environment:
      - DOCSERVICE_HOST_PORT=docservice:8000
      - EXAMPLE_HOST_PORT=example:3000
    stdin_open: true
    restart: always
    ports:
      - '80:8888'
    volumes:
      - common_data:/var/lib/${COMPANY_NAME} 
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
       
  docservice:
    build:
      context: .
      dockerfile: ${DOCKERFILE}
      target: docservice
    image: ${ACCOUNT_NAME}/${PREFIX_NAME}-docservice${PRODUCT_EDITION}:${DOCKER_TAG}
    deploy:
      replicas: 1
    environment:
      - DB_HOST=postgresql
      - DB_NAME=mydb
      - DB_USER=myuser
      - REDIST_SERVER_HOST=redis
      - AMQP_HOST=rabbitmq
      - METRICS_HOST=metrics
      - METRICS_ENABLED=true
      - WOPI_ENABLED=false
      - JWT_ENABLED=${JWT_ENABLED}
      - JWT_HEADER=${JWT_HEADER}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      proxy:
        condition: service_started
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      metrics:
        condition: service_started
    stdin_open: true
    restart: always
    expose:
      - '8000'
    volumes:
     - common_data:/var/lib/${COMPANY_NAME}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8000/info/info.json" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s


  converter:
    build:
      context: .
      dockerfile: ${DOCKERFILE}
      target: converter
    image: ${ACCOUNT_NAME}/${PREFIX_NAME}-converter${PRODUCT_EDITION}:${DOCKER_TAG}
    deploy:
      replicas: 2
    environment:
      - DB_HOST=postgresql
      - DB_NAME=mydb
      - DB_USER=myuser
      - REDIST_SERVER_HOST=redis
      - AMQP_HOST=rabbitmq
      - METRICS_HOST=metrics
      - METRICS_ENABLED=true
      - JWT_ENABLED=${JWT_ENABLED}
      - JWT_HEADER=${JWT_HEADER}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      proxy:
        condition: service_started
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      metrics:
        condition: service_started
    stdin_open: true
    restart: always
    volumes:
     - common_data:/var/lib/${COMPANY_NAME}

  utils:
    container_name: utils
    build:
      context: .
      dockerfile: ${DOCKERFILE}
      target: utils
    image: ${ACCOUNT_NAME}/${PREFIX_NAME}-utils:${DOCKER_TAG}
    stdin_open: true
    restart: always

  metrics:
    build:
      context: .
      dockerfile: ${DOCKERFILE}
      target: metrics
    container_name: metrics
    expose:
      - '8125'
      - '8126'

  example:
    image: ${COMPANY_NAME}/${PREFIX_NAME}-example:${DOCKER_TAG}
    container_name: example
    environment:
      - JWT_ENABLED=${JWT_ENABLED}
      - JWT_HEADER=${JWT_HEADER}
      - JWT_SECRET=${JWT_SECRET}
      # Uncomment the line below and enter your ONLYOFFICE Docs address
      # - DS_URL=http://onlyoffice-docs-address/
    depends_on:
      proxy:
        condition: service_started
    stdin_open: true
    restart: always
    expose:
      - '3000'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    container_name: redis
    image: redis:7
    restart: always
    expose:
      - '6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3
    restart: always
    expose:
      - '5672'
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

  postgresql:
    container_name: postgresql
    build:
      context: .
      target: db
    environment:
      - POSTGRES_DB=mydb
      - POSTGRES_USER=myuser
      - POSTGRES_HOST_AUTH_METHOD=trust
    restart: always
    expose:
      - '5432'
    volumes:
      - postgresql_data:/var/lib/postgresql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U onlyoffice"]
      interval: 10s
      retries: 3
      start_period: 10s
      timeout: 10s

volumes:
  common_data:
  postgresql_data:
